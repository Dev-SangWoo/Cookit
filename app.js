const readline = require("readline");
const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

// 🔧 명령줄 인자로 유튜브 링크 전달 받기
const passedUrl = process.argv[2];

function startWithUrl(url) {
  try {
    const audioPath = "downloads/audio.mp3";

    // [0] 기존 mp3 파일 삭제
    if (fs.existsSync(audioPath)) {
      fs.unlinkSync(audioPath);
    }

    // [1] mp3 다운로드
    console.log("\n[1] 오디오를 다운로드 중입니다...");
    execSync(
      `yt-dlp -x --audio-format mp3 --no-playlist -o "downloads/audio.%(ext)s" "${url}"`,
      { stdio: "inherit" }
    );

    // [2] 자막 확인 및 다운로드
    console.log("\n[2] 자막 확인 중...");
    const subsRaw = execSync(`yt-dlp --list-subs --no-playlist "${url}"`).toString();
    const hasKoSub = subsRaw.includes("ko");
    const hasAutoGenerated = subsRaw.toLowerCase().includes("auto-generated");
    const hasKoManual = hasKoSub && !hasAutoGenerated;

    if (!fs.existsSync("./yt-dlp_sub")) {
      fs.mkdirSync("./yt-dlp_sub");
    }

    if (hasKoManual) {
      console.log("[2-1] ✅ 한국어 수동 자막이 감지되었습니다. 다운로드합니다...");
      execSync(
        `yt-dlp --write-sub --sub-lang ko --skip-download --no-playlist -o "yt-dlp_sub/%(title)s.%(ext)s" "${url}"`,
        { stdio: "inherit" }
      );
    } else if (hasKoSub) {
      console.log("[2-1] ❌ 수동 자막 없음 → 자동 자막을 다운로드합니다...");
      execSync(
        `yt-dlp --write-auto-sub --sub-lang ko --skip-download --no-playlist -o "yt-dlp_sub/%(title)s.%(ext)s" "${url}"`,
        { stdio: "inherit" }
      );
    } else {
      console.log("[2-1] ⚠️ 한국어 자막 자체가 없습니다. 자막 다운로드 생략.");
    }

    // [3] OCR 분석 실행
    console.log("\n[3] 영상 속 자막 OCR 분석 중입니다...");
    execSync(`node ocr_analyze.js "${url}"`, { stdio: "inherit" });

    // [4] Whisper 실행
    console.log(`\n[4] 인식할 오디오 파일: ${audioPath}`);
    console.log("\n[5] Whisper로 음성 인식 중입니다...\n");
    execSync(`python test_whisper.py "${audioPath}"`, { stdio: "inherit" });

  } catch (err) {
    console.error("❌ 오류 발생:", err.message);
  }
}

if (passedUrl) {
  // 명령줄 인자가 있을 경우 바로 실행
  startWithUrl(passedUrl);
} else {
  // 명령줄 인자가 없을 때는 기존처럼 입력 받기
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question("유튜브 영상 링크를 입력하세요: ", function (url) {
    startWithUrl(url);
    rl.close();
  });
}
